// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate.Models
{
    public partial class Deployment : IUtf8JsonSerializable
    {
        void IUtf8JsonSerializable.Write(Utf8JsonWriter writer)
        {
            writer.WriteStartObject();
            writer.WritePropertyName("deploymentId");
            writer.WriteStringValue(DeploymentId);
            writer.WritePropertyName("startDateTime");
            writer.WriteStringValue(StartDateTime, "O");
            writer.WritePropertyName("updateId");
            writer.WriteObjectValue(UpdateId);
            writer.WritePropertyName("groupId");
            writer.WriteStringValue(GroupId);
            if (Optional.IsDefined(IsCanceled))
            {
                writer.WritePropertyName("isCanceled");
                writer.WriteBooleanValue(IsCanceled.Value);
            }
            if (Optional.IsDefined(IsRetried))
            {
                writer.WritePropertyName("isRetried");
                writer.WriteBooleanValue(IsRetried.Value);
            }
            writer.WriteEndObject();
        }

        internal static Deployment DeserializeDeployment(JsonElement element)
        {
            string deploymentId = default;
            DateTimeOffset startDateTime = default;
            UpdateId updateId = default;
            string groupId = default;
            Optional<bool> isCanceled = default;
            Optional<bool> isRetried = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("deploymentId"))
                {
                    deploymentId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("startDateTime"))
                {
                    startDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("updateId"))
                {
                    updateId = UpdateId.DeserializeUpdateId(property.Value);
                    continue;
                }
                if (property.NameEquals("groupId"))
                {
                    groupId = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isCanceled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isCanceled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("isRetried"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isRetried = property.Value.GetBoolean();
                    continue;
                }
            }
            return new Deployment(deploymentId, startDateTime, updateId, groupId, Optional.ToNullable(isCanceled), Optional.ToNullable(isRetried));
        }
    }
}
