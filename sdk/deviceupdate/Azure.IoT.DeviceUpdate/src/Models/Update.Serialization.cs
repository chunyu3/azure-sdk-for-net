// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.IoT.DeviceUpdate.Models
{
    public partial class Update
    {
        internal static Update DeserializeUpdate(JsonElement element)
        {
            UpdateId updateId = default;
            Optional<string> description = default;
            Optional<string> friendlyName = default;
            Optional<bool> isDeployable = default;
            Optional<string> updateType = default;
            Optional<string> installedCriteria = default;
            IReadOnlyList<IDictionary<string, string>> compatibility = default;
            Optional<Instructions> instructions = default;
            Optional<IReadOnlyList<UpdateId>> referencedBy = default;
            Optional<string> scanResult = default;
            string manifestVersion = default;
            DateTimeOffset importedDateTime = default;
            DateTimeOffset createdDateTime = default;
            Optional<string> etag = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("updateId"))
                {
                    updateId = UpdateId.DeserializeUpdateId(property.Value);
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("friendlyName"))
                {
                    friendlyName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("isDeployable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDeployable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("updateType"))
                {
                    updateType = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("installedCriteria"))
                {
                    installedCriteria = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("compatibility"))
                {
                    List<IDictionary<string, string>> array = new List<IDictionary<string, string>>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        Dictionary<string, string> dictionary = new Dictionary<string, string>();
                        foreach (var property0 in item.EnumerateObject())
                        {
                            dictionary.Add(property0.Name, property0.Value.GetString());
                        }
                        array.Add(dictionary);
                    }
                    compatibility = array;
                    continue;
                }
                if (property.NameEquals("instructions"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    instructions = Instructions.DeserializeInstructions(property.Value);
                    continue;
                }
                if (property.NameEquals("referencedBy"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<UpdateId> array = new List<UpdateId>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(UpdateId.DeserializeUpdateId(item));
                    }
                    referencedBy = array;
                    continue;
                }
                if (property.NameEquals("scanResult"))
                {
                    scanResult = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("manifestVersion"))
                {
                    manifestVersion = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("importedDateTime"))
                {
                    importedDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("createdDateTime"))
                {
                    createdDateTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("etag"))
                {
                    etag = property.Value.GetString();
                    continue;
                }
            }
            return new Update(updateId, description.Value, friendlyName.Value, Optional.ToNullable(isDeployable), updateType.Value, installedCriteria.Value, compatibility, instructions.Value, Optional.ToList(referencedBy), scanResult.Value, manifestVersion, importedDateTime, createdDateTime, etag.Value);
        }
    }
}
