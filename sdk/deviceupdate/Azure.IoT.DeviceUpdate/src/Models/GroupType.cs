// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.IoT.DeviceUpdate.Models
{
    /// <summary> Supported group types. </summary>
    public readonly partial struct GroupType : IEquatable<GroupType>
    {
        private readonly string _value;

        /// <summary> Initializes a new instance of <see cref="GroupType"/>. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public GroupType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string DeviceClassIdAndIoTHubTagValue = "DeviceClassIdAndIoTHubTag";
        private const string InvalidDeviceClassIdAndIoTHubTagValue = "InvalidDeviceClassIdAndIoTHubTag";
        private const string DefaultDeviceClassIdValue = "DefaultDeviceClassId";

        /// <summary> DeviceClassId IoT Hub tag based group, all devices in the group are compatible with the same updates and share a tag and deviceClassId. </summary>
        public static GroupType DeviceClassIdAndIoTHubTag { get; } = new GroupType(DeviceClassIdAndIoTHubTagValue);
        /// <summary> Invalid deviceClassId IoT Hub tag based group, all devices in the group do not match the deviceClassId of the valid group they were tagged to join. </summary>
        public static GroupType InvalidDeviceClassIdAndIoTHubTag { get; } = new GroupType(InvalidDeviceClassIdAndIoTHubTagValue);
        /// <summary> Default deviceClassId based group, all devices in the group have no tags but are part of the same deviceClassId.  All devices will be part of one of these groups until a user tags them to join another group. </summary>
        public static GroupType DefaultDeviceClassId { get; } = new GroupType(DefaultDeviceClassIdValue);
        /// <summary> Determines if two <see cref="GroupType"/> values are the same. </summary>
        public static bool operator ==(GroupType left, GroupType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="GroupType"/> values are not the same. </summary>
        public static bool operator !=(GroupType left, GroupType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="GroupType"/>. </summary>
        public static implicit operator GroupType(string value) => new GroupType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is GroupType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(GroupType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
